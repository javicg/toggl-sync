package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/javicg/toggl-sync/config"
	"io"
	"net/http"
	"time"
)

const workLogEntryCommentFooter = "Added automatically by toggl-sync"

// JiraAPI is the Jira API client contract listing all supported calls.
type JiraAPI interface {
	LogWork(ticket string, timeSpent time.Duration) error
	LogWorkWithUserDescription(ticket string, timeSpent time.Duration, description string) error
}

// JiraAPIHTTPClient is the implementation of JiraAPI using an HTTP client.
type JiraAPIHTTPClient struct {
	client *http.Client
}

// NewJiraAPI creates a new API client for Jira.
func NewJiraAPI() JiraAPI {
	api := &JiraAPIHTTPClient{}
	api.client = &http.Client{}
	return api
}

type workLogEntry struct {
	Comment          string `json:"comment"`
	TimeSpentSeconds int    `json:"timeSpentSeconds"`
}

// LogWork logs the work on the specified Jira ticket, using the provided duration and a default description
func (jira *JiraAPIHTTPClient) LogWork(ticket string, timeSpent time.Duration) (err error) {
	entry := createWorkLogEntry(timeSpent)
	return jira.logEntry(ticket, entry)
}

func createWorkLogEntry(timeSpent time.Duration) *workLogEntry {
	return &workLogEntry{
		Comment:          workLogEntryCommentFooter,
		TimeSpentSeconds: int(timeSpent.Seconds()),
	}
}

// LogWorkWithUserDescription logs the work on the specified Jira ticket, using the provided duration and a description generated by the user
func (jira *JiraAPIHTTPClient) LogWorkWithUserDescription(ticket string, timeSpent time.Duration, description string) (err error) {
	entry := createWorkLogEntryWithUserDescription(timeSpent, description)
	return jira.logEntry(ticket, entry)
}

func createWorkLogEntryWithUserDescription(timeSpent time.Duration, description string) *workLogEntry {
	return &workLogEntry{
		Comment:          fmt.Sprintf("%s\n%s", description, workLogEntryCommentFooter),
		TimeSpentSeconds: int(timeSpent.Seconds()),
	}
}

func (jira *JiraAPIHTTPClient) logEntry(ticket string, entry *workLogEntry) error {
	entryJSON, err := json.Marshal(entry)
	if err != nil {
		return fmt.Errorf("[LogWork] Marshalling of work entry failed! Error: %s", err)
	}

	resp, err := jira.postAuthenticated("/issue/"+ticket+"/worklog", bytes.NewBuffer(entryJSON))
	if err != nil {
		return err
	} else if resp.StatusCode != 201 {
		return fmt.Errorf("[LogWork] Request to log work for ticket [%s] failed with status [%d]", ticket, resp.StatusCode)
	}

	return resp.Body.Close()
}

func (jira *JiraAPIHTTPClient) postAuthenticated(path string, body io.Reader) (resp *http.Response, err error) {
	req, err := http.NewRequest("POST", config.Get(config.JiraServerURL)+"/rest/api/latest"+path, body)
	if err != nil {
		return
	}

	req.SetBasicAuth(config.Get(config.JiraUsername), config.Get(config.JiraPassword))

	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Accept", "application/json")
	return jira.client.Do(req)
}
